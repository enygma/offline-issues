#!/usr/bin/php
<?php
date_default_timezone_set('UTC');

/**
*
* SETUP:
* - Change the settings information below (otherwise you'll just get my list)
* - Be sure your PHP has access to write to /tmp
* - Change the TTL if you'd like a shorter timeout
*
* Multi-repo support!
* ./gh-issues --repo=user/reponame --> used to grab the issues from another repo
*/

class getIssues {
	
	private $_url	= '/repos/:user/:repo/issues';
	private $_host	= 'api.github.com';
	private $_settings	= array(
		':status'	=> 'open',
		':user'		=> 'joindin',
		':repo'		=> 'joind.in'
	);
	private $_file	= '';
	private $_ttl	= 172800; // 172800 seconds = 48 hours
	private $_args	= array();

	/** 
	 * construct 
	 */
	public function __construct(){
		$this->_file='/tmp/'.date('Ymd').'_:repo_issues';
		$this->_ttl=$this->_ttl*10;
	}

	/**
	 * Built the cache filename
	 */
	private function _getCacheFile(){
		return str_replace(array_keys($this->_settings),$this->_settings,$this->_file);
	}

	/**
	 * Either grab the defaults from $_settings or use ones defined from the cmd line
	 */
	private function _getConnectInfo(){
		if(isset($this->_args['repo'])){
			$detail=explode('/',$this->_args['repo']);
                        $this->_settings[':user']=$detail[0];
                        $this->_settings[':repo']=$detail[1];
		}
		return $this->_settings;
	}

	/**
	 * Parse the arguments we've been given
	 */
	private function _parseArgs(){
		if(count($_SERVER['argv'])>1){
			// Compress them down into one string
			foreach($_SERVER['argv'] as $arg){
				preg_match('/--(.+)/',$arg,$match);
				if(empty($match)){ continue; }
				$p=explode('=',$match[1]);
				$this->_args[$p[0]]=(isset($p[1])) ? $p[1] : true;
			}
                }

		//If there's not a value, assume it's display of the default
		if(!isset($this->_args['display'])){ $this->_args['display']='list'; }
	}

	/**
	 * Main function
	 */
	public function run(){
		$this->_parseArgs();
		$this->_getConnectInfo();
		$file=$this->_getCacheFile();

		// grab the issues and their comments
		$force = (isset($this->_args['force'])) ? true : false;
		$issues_list= $this->_fetch($file,$force);

		//var_dump($issues_list);
		foreach($issues_list as $issue){
			$path='/repos/:user/:repo/issues/'.$issue->number.'/comments';
			$path=str_replace(array_keys($this->_settings),$this->_settings,$path);

			$this->_file='/tmp/'.date('Ymd').'_:repo_issue_comments_'.$issue->number;
			$file=$this->_getCacheFile();

			$comments=$this->_fetch($file,false,$path);
		}

		// display the results
		$this->_display($issues_list);
	}
	
	/**
	 * Build and send the request to the github API
	 */
	private function _request($path){
		$ret=false;

		echo $path."\n";
		
		if($fp=@fsockopen("ssl://" . $this->_host,443,$errno,$errstr,10)){
			$req=sprintf("GET ".$path." HTTP/1.1\r\nHost: ".$this->_host.
				         "\r\nConnection: Close\r\n".
				         "User-Agent: github.com/enygma/offline-issues\r\n\r\n");
			fwrite($fp,$req);
			while(!feof($fp)){ $ret.=fread($fp,1024); }
			fclose($fp);
			
			$p=explode("\r\n\r\n",$ret);
			return $p[1];
		}else{
			//we cant get it after all, just use what we have
			return false;
		}
	}
	
	/**
	 * Either fetch the cache file or get the new issues list from remote site
	 */
	private function _fetch($file,$force=false,$force_path=null){
		//check the TTL on the file
		if( (file_exists($file) && filectime($file)<=time()-$this->_ttl) || !file_exists($file) || $force){

			$settings = ($cinfo=$this->_getConnectInfo()) ? $cinfo : $this->_settings;
			$path = str_replace(array_keys($settings),$settings,$this->_url);

			if($force_path){ $path=$force_path; }
			if($response=$this->_request($path)){
				$fp=fopen($file,'w+');
				if($fp){
					fwrite($fp,$response);
					fclose($fp);
				}else{ throw new Exception('Cannot open cache file!'); }
			}else{
				//We tried to make the update request, but couldn't
				//If the file's already there, leave it - otherwise....
				if(!is_file($file)){
					throw new Exception('Cannot fetch issues information!');
				}
			}
		}
		return json_decode(file_get_contents($file));
	}
	
	/**
	 * Push the issues information out to the right display method
	 * @param array $issues Issues list info
	 */
	private function _display($issues){
		$out	= '';
		$action	= (isset($this->_args['display'])) ? strtolower($this->_args['display']) : 'list';
		
		$func='_display'.ucwords($action);
		if(method_exists($this,$func)){
			$out=$this->$func($issues);
		}else{ throw new Exception('Incorrect action!'); }
		echo "\n".$out."\n";
	}
	
	/**
	 * Display issues in a summary list
	 * @param array #issues Issues list info
	 * @help Tetsing this
	 */
	private function _displayList($issues){
		$out='';
		if(count($issues)==0){
			throw new Exception('No issues to display for this repo!');
		}
		foreach($issues as $k => $issue){
			$out.='['.$issue->number.'] '.$issue->title."\n";
		}
		$out.="\n".'Use gh-issues --display=detail --id=[number] to get more info...';
		return $out;
	}
	
	/**
	 * Find the issue and display its details
	 * @param array $issues Issues list info
	 */
	private function _displayDetail($issues){
		$out='';
		if(isset($this->_args['id'])){
			$detail_id=$this->_args['id'];
		}else{ throw new Exception('Invalid Detail ID!'); }
		
		foreach($issues as $k=>$issue){
			if($issue->number==$detail_id){
				$out.='Issue #'.$detail_id.": ";
				$out.=$issue->title."\n+++++++++\n".$issue->body;
				$out.="\n\n";
				$out.="created  : ".$issue->created_at."\n";
				$out.="labels   : ";
				$first=true;
				foreach($issue->labels as $label){
				  if ($first) {
					$first=false;
				  } else {
					$out.=', ';
				  }
				  $out.=$label->name;
				}

				$out.="\n\n".$this->_displayComments($issue->number);
			}
		}
		if(empty($out)){
			throw new Exception('Detail ID Not Found!');
		}
		return $out;
	}
	
	/**
	 * Force a refresh of the data from the remote source
	 */
	private function _displayForce(){ 
		$out='Update forced!'; 
		$this->_fetch($this->_getCacheFile(),true);
		return $out; 
	}
	
	/**
	 * Echo out some help information
	 */
	private function _displayHelp(){
		$out	 = 'Help Text';
		$defines = array();
		$expr	 = '/((?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/))/';
		preg_match_all($expr, file_get_contents(__FILE__), $matches);


		$cl=new ReflectionClass('getIssues');
		$methods=$cl->getMethods();

		foreach($methods as $k=>$method){
			if(strpos($matches[1][$k],'@help')){
				$defines[$method->name]=$matches[1][$k];
			}
		}
		
		// If there's a @help in its comments, it's in here
		//print_r($defines);

		return $out;
	}

	private function _displayComments($issue_id){
		$file='/tmp/'.date('Ymd').'_'.$this->_settings[':repo'].'_issue_comments_'.$issue_id;
		$contents="=== COMMENTS ==========\n";
		if(is_file($file)){
			$file_contents=json_decode(file_get_contents($file));
			foreach($file_contents->comments as $value){
				$contents.=$value->created_at.' by '.$value->user."\n";
				$contents.=$value->body."\n";
				$contents.="--------------------\n";
			}
		}
		return $contents;
	}
	
}

$issues=new getIssues();
try {
	$issues->run();
}catch(Exception $e){
	echo "########################################\n";
	echo '# ERROR: '.$e->getMessage()."\n";
	echo "########################################\n";
}

?>
